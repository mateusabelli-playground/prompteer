generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Prompt {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @unique @map("user_id")
  languageId String   @unique @map("language_id") @db.Uuid
  title      String
  content    String
  parameter  String?
  detail     String?
  likeCount  Int      @default(0) @map("like_count")
  flagCount  Int      @default(0) @map("flag_count")
  isFlagged  Boolean  @default(false) @map("is_flagged")
  createdAt  DateTime @default(now()) @map("created_at")
  comments   Comment?
  language   Language @relation(fields: [languageId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prompts")
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @map("user_id")
  promptId  String   @unique @map("prompt_id") @db.Uuid
  content   String
  likeCount Int      @default(0) @map("like_count")
  flagCount Int      @default(0) @map("flag_count")
  isFlagged Boolean  @default(false) @map("is_flagged")
  createdAt DateTime @default(now()) @map("created_at")
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Language {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  code    String
  prompts Prompt?

  @@map("languages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  stripeCustomerId String?   @unique @map("stripe_customer_id")
  stripeActive     Boolean   @default(false) @map("stripe_active")
  subscription     String    @default("free")
  flagCount        Int       @default(0) @map("flag_count")
  isFlagged        Boolean   @default(false) @map("is_flagged")
  accounts         Account[]
  comments         Comment?
  prompts          Prompt?
  sessions         Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
