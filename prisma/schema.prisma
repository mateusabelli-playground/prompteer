generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Prompt {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique
  language   Language  @relation(fields: [languageId], references: [id])
  languageId String    @unique @db.Uuid
  title      String
  prompt     String
  parameter  String?
  detail     String?
  likeCount  Int       @default(0)
  flagCount  Int       @default(0)
  isFlagged  Boolean   @default(false)
  comments   Comment[]
  createdAt  DateTime  @default(now())
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId  String   @unique @db.Uuid
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  comment   String
  likeCount Int      @default(0)
  flagCount Int      @default(0)
  isFlagged Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Language {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  code    String
  prompts Prompt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?   @unique
  stripeActive     Boolean   @default(false)
  prompts          Prompt[]
  comments         Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
